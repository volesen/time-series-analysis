x <- c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
s2 <- var(x)
L.complete.data <- function(theta) {
prod(dnorm(x, mean = theta, sd = sqrt(s2)))
}
x.ave <- mean(x)
n <- length(x)
L.ave <- function(theta) {
dnorm(x.ave, mean = theta, sd = sqrt(s2/n))
}
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L/max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L/max(L)), col = "red")
x.ave
?optim
nll.complete.data <- function(theta) {
-sum(dnorm(x, mean = theta, sd = sqrt(s2), log = TRUE))
}
fit <- optim(x.ave, nll.complete.data, hessian = TRUE,
lower=70, upper=90)
fit[c("convergence", "par", "hessian")]
s2
var(x)
sd(x)
x <- c(4,6,3,7,2,4)
lambda_vector <- seq(0, 10, length.out = 100)
likelihood <- function(lambda){
prod(dpois(x, lambda = lambda))
}
likelihood_plotting <- sapply(lambda_vector, likelihood)
plot(lambda_vector, likelihood_plotting, type = "l")
par(mar=c(1,1,1,1))
plot(lambda_vector, likelihood_plotting, type = "l")
device.off()
x <- c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
s2 <- var(x)
L.complete.data <- function(theta) {
prod(dnorm(x, mean = theta, sd = sqrt(s2)))
}
x.ave <- mean(x)
n <- length(x)
L.ave <- function(theta) {
dnorm(x.ave, mean = theta, sd = sqrt(s2/n))
}
th <- seq(x.ave - 3 * sqrt(s2), x.ave + 3 * sqrt(s2), length = 200)
L <- sapply(th, L.complete.data)
plot(th, log(L/max(L)), ylab = "L", xlab = expression(theta))
L <- sapply(th, L.ave)
lines(th, log(L/max(L)), col = "red")
###### UNDERSTANDING INVERSE COVARIANCE ################
library(mvtnorm)
?dmvnorm
x <- 5
x <- 5
rm(list=ls())
print(utils::getSrcDirectory(function(){}))
print(utils::getSrcFilename(function(){}, full.names = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# options(scipen=999)
options(scipen=0)
# dev.off()
Sys.setenv(LANG = "en")
library(MASS)
library(dplyr)
# library(tsibble)
library(forecast)
# library(matlib)
library(nlme)
library(fitdistrplus)
set.seed(400)
n_3 = 300
simulations_number_3 = 100
# phi_2_list = -c(seq(0.52, 0.98, 0.1), 0.98)
# sigma_list =c(0.1, 1, 3, 5)
phi_2_list = c(-0.52, -0.98)
# phi_2_list = -seq(0.52, 0.98, 0.01)
sigma_list = c(0.1, 5)
parameters_3 = c("phi_1" = 1.5, "phi_2" = NA)
results_3 <- array(NA, dim=c(length(phi_2_list), length(sigma_list),
n_3, simulations_number_3))
# dim(results_3): (2, 2, 300, 100)
# phi, sigma, n_3, simulations_number_3
# simulations
for(i in 1:length(phi_2_list)){
for(j in 1:length(sigma_list)){
results_tmp = matrix(NA, nrow = n_3, ncol = simulations_number_3)
phi_2 = phi_2_list[i]
sigma = sigma_list[j]
for (index in 1:simulations_number_3){
results_tmp[,index] = arima.sim(n = n_3,
list(ar = c(parameters_3[1], phi_2)),
sd = sigma, n.start=2)
}
results_3[i, j, , ] = as.array(results_tmp)
}
}
# estimation_phi_2 <- array(NA, dim=c(4, simulations_number_3))
estimation_full <- array(NA, dim=c(length(phi_2_list), length(sigma_list), 2, simulations_number_3),
dimnames = list(phi_2_list, sigma_list,
c("phi_1_estimated", "phi_2_estimated")))
# phi, sigma, estimation_parameters, simulations_number_3
for(i in 1:length(phi_2_list)){
for(j in 1:length(sigma_list)){
print(c(phi_2_list[i], sigma_list[j]))
for(simulation_number in 1:simulations_number_3){
series = results_3[i,j, ,simulation_number]
model_tmp_full <- arima(series, order = c(2, 0, 0),
include.mean = FALSE)
estimation_full[i,j, ,simulation_number] =  model_tmp_full$coef[c("ar1", "ar2")]
}
}
}
dim(estimation_full)
parameters_testing <- estimation_full[1, 1, , 1]
parameters_testing
dim(results_3)
data_testing <- results_3[1, 1, , 1]
plot(data_testing)
parameters_testing <- estimation_full[1, 2, , 1]
data_testing <- results_3[1, 2, , 1]
plot(data_testing)
data_testing
model_lm <-
x <- c(1, 2, 3, 4)
x[-1]
x[-3]
y <- data_testing[-2]
X <- cbind(data_testing[-1:(length(data_testing) - 2)], data_testing[1:(length(data_testing) - 2)])
data_testing[-1:(length(data_testing) - 2)]
X <- cbind(data_testing[-1:(length(data_testing) - 1)], data_testing[1:(length(data_testing) - 2)])
X <- cbind(data_testing[2:(length(data_testing) - 1)], data_testing[1:(length(data_testing) - 2)])
head(X)
head(y)
y <- data_testing[-2]
X <- cbind(data_testing[2:(length(data_testing) - 1)], data_testing[1:(length(data_testing) - 2)])
head(y)
head(X)
x[-1]
x[-2]
y <- data_testing[3:length(data_testing)]
X <- cbind(data_testing[2:(length(data_testing) - 1)], data_testing[1:(length(data_testing) - 2)])
head(y)
head(X)
y <- data_testing[3:length(data_testing)]
X <- cbind("x1" = data_testing[2:(length(data_testing) - 1)],
"x2" = data_testing[1:(length(data_testing) - 2)])
model_lm <- lm(y ~ X$x1 + X$x)
y <- data_testing[3:length(data_testing)]
X <- cbind("x1" = data_testing[2:(length(data_testing) - 1)],
"x2" = data_testing[1:(length(data_testing) - 2)])
model_lm <- lm(y ~ X["x1"] + X["x2"])
length(X["x1"])
head(X)
y <- data_testing[3:length(data_testing)]
X <- data.frame(cbind("x1" = data_testing[2:(length(data_testing) - 1)],
"x2" = data_testing[1:(length(data_testing) - 2)]))
model_lm <- lm(y ~ X$x1 + X$x2)
summary(model_lm)
summary(model_lm, cor = T)
?arima
?var
df <- read.table("A2_sales.txt", sep="",header=TRUE)
df <- df %>%
mutate(year = as.numeric(substr(Quarter, 1, 4)),
quarter = as.numeric(substr(Quarter, 6, 6)),
index = seq(1, dim(df)[1])) %>%
mutate(time = as.numeric(year + (quarter - 1)/4))
mu = 2070
period = 4
noise_variance = 36963
par(mfrow=c(1,1))
plot(df$index, df$Sales - mu)
parameters_2 = c("phi_1" = 1.04, "phi_2" = -0.2, "Phi_1" = 0.86,
"Theta_1" = -0.42, "mu" = mu)
model <- arima(df$Sales, order = c(2, 0, 0),
seasonal = list(order = c(1, 0, 1), period = period),
include.mean = TRUE,
fixed = parameters_2)
predictions <- predict(model, n.ahead = 2, se.fit = TRUE)
model$sigma2
model_our_sigma <- model
model_our_sigma$sigma2 <- noise_variance
str(model_our_sigma)
predictions_our_sigma <- predict(model_our_sigma, n.ahead = 2, se.fit = TRUE)
# ? how to set sigma in the arima function?
# using forecast package
df$Sales %>%
Arima(order = c(2, 0, 0),
seasonal = list(order = c(1, 0, 1), period = period),
include.mean = TRUE,
fixed = parameters_2) %>%
forecast(h=2) %>%
autoplot
predictions_our_sigma
df <- read.table("A2_sales.txt", sep="",header=TRUE)
df <- df %>%
mutate(year = as.numeric(substr(Quarter, 1, 4)),
quarter = as.numeric(substr(Quarter, 6, 6)),
index = seq(1, dim(df)[1])) %>%
mutate(time = as.numeric(year + (quarter - 1)/4))
mu = 2070
period = 4
noise_variance = 36963
par(mfrow=c(1,1))
plot(df$index, df$Sales - mu)
parameters_2 = c("phi_1" = 1.04, "phi_2" = -0.2, "Phi_1" = 0.86,
"Theta_1" = -0.42, "mu" = mu)
model <- arima(df$Sales, order = c(2, 0, 0),
seasonal = list(order = c(1, 0, 1), period = period),
include.mean = TRUE,
fixed = parameters_2)
ARMAtoMA(model)
model
ARMAtoMA(model)
predictions_our_sigma
predictions_our_sigma$pred
as.numeric(predictions_our_sigma$pred)
std <- as.numeric(predictions_our_sigma$se)
std
c(stuff[1] - qnorm(0.975)*std[1], stuff[1] + qnorm(0.975)*std[1])
stuff <- as.numeric(predictions_our_sigma$pred)
std <- as.numeric(predictions_our_sigma$se)
c(stuff[1] - qnorm(0.975)*std[1], stuff[1] + qnorm(0.975)*std[1])
c(stuff[2] - qnorm(0.975)*std[2], stuff[2] + qnorm(0.975)*std[2])
set.seed(400)
n_3 = 300
simulations_number_3 = 100
# phi_2_list = -c(seq(0.52, 0.98, 0.1), 0.98)
# sigma_list =c(0.1, 1, 3, 5)
phi_2_list = c(-0.52, -0.98)
# phi_2_list = -seq(0.52, 0.98, 0.01)
sigma_list = c(0.1, 5)
parameters_3 = c("phi_1" = 1.5, "phi_2" = NA)
results_3 <- array(NA, dim=c(length(phi_2_list), length(sigma_list),
n_3, simulations_number_3))
# dim(results_3): (2, 2, 300, 100)
# phi, sigma, n_3, simulations_number_3
# simulations
for(i in 1:length(phi_2_list)){
for(j in 1:length(sigma_list)){
results_tmp = matrix(NA, nrow = n_3, ncol = simulations_number_3)
phi_2 = phi_2_list[i]
sigma = sigma_list[j]
for (index in 1:simulations_number_3){
results_tmp[,index] = arima.sim(n = n_3,
list(ar = c(parameters_3[1], phi_2)),
sd = sigma, n.start=2)
}
results_3[i, j, , ] = as.array(results_tmp)
}
}
# estimation_phi_2 <- array(NA, dim=c(4, simulations_number_3))
estimation_full <- array(NA, dim=c(length(phi_2_list), length(sigma_list), 2, simulations_number_3),
dimnames = list(phi_2_list, sigma_list,
c("phi_1_estimated", "phi_2_estimated")))
# phi, sigma, estimation_parameters, simulations_number_3
for(i in 1:length(phi_2_list)){
for(j in 1:length(sigma_list)){
print(c(phi_2_list[i], sigma_list[j]))
for(simulation_number in 1:simulations_number_3){
series = results_3[i,j, ,simulation_number]
model_tmp_full <- arima(series, order = c(2, 0, 0),
include.mean = FALSE)
estimation_full[i,j, ,simulation_number] =  model_tmp_full$coef[c("ar1", "ar2")]
}
}
}
dim(estimation_full)
#### full region #####
plotting <- estimation_full[1, 1, , ]
plotting
dim(plotting)
plot(estimation_full[1, 1, , ], col = "red")
lines(estimation_full[1, 2, , ], type = "p", col = "red")
lines(estimation_full[2, 1, , ], type = "p", col = "black")
lines(estimation_full[2, 2, , ], type = "p", col = "black")
plot(estimation_full[1, 1, , ], col = "red",
xlim = c(-1, 2), ylim = (-1, 2))
plot(estimation_full[1, 1, , ], col = "red",
xlim = c(-1, 2), ylim = c(-1, 2))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-1, 2), ylim = c(-1, 2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "red")
lines(estimation_full[2, 1,1, ], estimation_full[1, 2,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "black")
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-1, 2), ylim = c(-1, 2))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-1, 2), ylim = c(-1, 2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
par(mfrow=c(length(sigma_list), length(phi_2_list)))
# par(mfrow=c(1, 1))
for(sigma_2_index in 1:length(sigma_list)){
for(phi_2_index in 1:length(phi_2_list)){
sd_res <- sd(results_3[phi_2_index, sigma_2_index, , ])
matplot(results_3[phi_2_index, sigma_2_index, , 1:4], type = "l",
lty = 1:1,
main = paste("phi_2=", -phi_2_list[phi_2_index],
" | sigma=",  sigma_list[sigma_2_index],
" | sd_phi_2=",
round(sd(estimation_full[phi_2_index, sigma_2_index, 2, ]), 3)),
xlab="", ylab = "X_t",
)
}
}
par(mfrow=c(length(sigma_list), length(phi_2_list)))
# par(mfrow=c(1, 1))
for(sigma_2_index in 1:length(sigma_list)){
for(phi_2_index in 1:length(phi_2_list)){
sd_res <- sd(results_3[phi_2_index, sigma_2_index, , ])
matplot(results_3[phi_2_index, sigma_2_index, , 1:4], type = "l",
lty = 1:1,
main = paste("phi_2=", -phi_2_list[phi_2_index],
" | sigma=",  sigma_list[sigma_2_index],
" | sd_phi_2=",
round(sd(estimation_full[phi_2_index, sigma_2_index, 2, ]), 3)),
xlab="", ylab = "X_t",
)
}
}
par(mfrow=c(length(sigma_list), length(phi_2_list)))
# par(mfrow=c(1, 1))
for(sigma_2_index in 1:length(sigma_list)){
for(phi_2_index in 1:length(phi_2_list)){
sd_res <- sd(results_3[phi_2_index, sigma_2_index, , ])
# plot(results_3[phi_2_index, sigma_2_index, , 1:4], type = "l",
#         main = paste("p=", -phi_2_list[phi_2_index],
#                      ", s=",  sigma_list[sigma_2_index],
#                      ", sdp=", round(sd(estimation_full[phi_2_index, sigma_2_index, 2, ]), 3),
#                      ", sdX=", round(sd_res, 2) ))
plot(estimation_full[phi_2_index, sigma_2_index, 1, ],
estimation_full[phi_2_index, sigma_2_index, 2, ],
xlab="phi_1_estimated", ylab = "phi_2_estimated",
xlim = c(-1.6, -1.4),
main = paste("phi_2=", -phi_2_list[phi_2_index],
" | sigma=",  sigma_list[sigma_2_index],
" | sd_phi_2=",
round(sd(estimation_full[phi_2_index, sigma_2_index, 2, ]), 3)))
}
}
estimation_full = -estimation_full
par(mfrow=c(length(sigma_list), length(phi_2_list)))
# par(mfrow=c(1, 1))
for(sigma_2_index in 1:length(sigma_list)){
for(phi_2_index in 1:length(phi_2_list)){
sd_res <- sd(results_3[phi_2_index, sigma_2_index, , ])
# plot(results_3[phi_2_index, sigma_2_index, , 1:4], type = "l",
#         main = paste("p=", -phi_2_list[phi_2_index],
#                      ", s=",  sigma_list[sigma_2_index],
#                      ", sdp=", round(sd(estimation_full[phi_2_index, sigma_2_index, 2, ]), 3),
#                      ", sdX=", round(sd_res, 2) ))
plot(estimation_full[phi_2_index, sigma_2_index, 1, ],
estimation_full[phi_2_index, sigma_2_index, 2, ],
xlab="phi_1_estimated", ylab = "phi_2_estimated",
xlim = c(-1.6, -1.4),
main = paste("phi_2=", -phi_2_list[phi_2_index],
" | sigma=",  sigma_list[sigma_2_index],
" | sd_phi_2=",
round(sd(estimation_full[phi_2_index, sigma_2_index, 2, ]), 3)))
}
}
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-1, 2), ylim = c(-1, 2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[1, 2,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "black")
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red")
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[1, 2,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "black")
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red")
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[1, 2,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "black")
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red")
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
range(estimation_full[2, 1,1, ])
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red")
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "black")
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
ylim = c(0, 2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "black")
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-2, 0), ylim = c(0, 2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "black")
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-2, -1), ylim = c(0, 2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "black")
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-2, -1), ylim = c(0, 2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "yellow")
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-2, -1), ylim = c(0, 1.2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "yellow")
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = "#1b98e0")
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = "#1b98e0", )
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-2, -1), ylim = c(0, 1.2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "yellow")
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = "#1b98e0", alpha = 0.2)
?polygon
par(mfrow = c(1, 1))
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = alpha("#1b98e0", 0.2))
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-2, -1), ylim = c(0, 1.2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "yellow")
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = alpha("#1b98e0", 0.2))
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = rgb("#1b98e0", alpha = 0.2))
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = rgb("blue", alpha = 0.2))
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = rgb(c(0, 0, 200), alpha = 0.2))
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = rgb(0, 0, 200, alpha = 0.2))
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = rgb(0, 0, 0.5, alpha = 0.2))
par(mfrow = c(1, 1))
plot(estimation_full[1, 1,1,], estimation_full[1, 1,2,], col = "red",
xlim = c(-2, -1), ylim = c(0, 1.2))
lines(estimation_full[1, 2,1, ], estimation_full[1, 2,2, ], type = "p", col = "green")
lines(estimation_full[2, 1,1, ], estimation_full[2, 1,2, ], type = "p", col = "black")
lines(estimation_full[2, 2,1, ], estimation_full[2, 2,2, ], type = "p", col = "yellow")
polygon(x = c(-2, 2, 0),                           # X-Coordinates of polygon
y = c(1, 1, -1),                             # Y-Coordinates of polygon
col = rgb(0, 0, 0.5, alpha = 0.2))
ARMAtoMA(c(1.5, -0.98))
ARMAtoMA(c(1.5, -0.98), lag.max = 20)
ARMAtoMA(c(1.5, -0.52), lag.max = 20)
plot(ARMAtoMA(c(1.5, -0.98), lag.max = 20))
lines(ARMAtoMA(c(1.5, -0.52), lag.max = 20), type = "p")
plot(ARMAtoMA(c(1.5, -0.98), lag.max = 20), col = "red")
lines(ARMAtoMA(c(1.5, -0.52), lag.max = 20), type = "p")
plot(ARMAtoMA(c(1.5, -0.98), lag.max = 20), col = "red", ylim = c(-1.5, 2))
lines(ARMAtoMA(c(1.5, -0.52), lag.max = 20), type = "p")
number = 100
plot(ARMAtoMA(c(1.5, -0.98), lag.max = number), col = "red", ylim = c(-1.5, 2))
lines(ARMAtoMA(c(1.5, -0.52), lag.max = number), type = "p")
ARMAacf(ar = c(1.5, -0.98))
ARMAacf(ar = c(1.5, -0.98), lag.max = number)
plot(ARMAacf(ar = c(1.5, -0.98), lag.max = number), col = "red")
lines(ARMAacf(ar = c(1.5, -0.52), lag.max = number), type = "p")
plot(ARMAacf(ar = c(1.5, -0.98), lag.max = 20), col = "red")
lines(ARMAacf(ar = c(1.5, -0.52), lag.max = 20), type = "p")
par(mfrow = c(2, 1))
number = 100
plot(ARMAtoMA(c(1.5, -0.98), lag.max = number), col = "red", ylim = c(-1.5, 2))
lines(ARMAtoMA(c(1.5, -0.52), lag.max = number), type = "p")
plot(ARMAacf(ar = c(1.5, -0.98), lag.max = 20), col = "red")
lines(ARMAacf(ar = c(1.5, -0.52), lag.max = 20), type = "p")
par(mfrow = c(1, 2))
number = 100
plot(ARMAtoMA(c(1.5, -0.98), lag.max = number), col = "red", ylim = c(-1.5, 2))
lines(ARMAtoMA(c(1.5, -0.52), lag.max = number), type = "p")
plot(ARMAacf(ar = c(1.5, -0.98), lag.max = 20), col = "red")
lines(ARMAacf(ar = c(1.5, -0.52), lag.max = 20), type = "p")
par(mfrow = c(1, 2))
number = 100
plot(ARMAtoMA(c(1.5, -0.98), lag.max = number), col = "red", ylim = c(-1.5, 2))
lines(ARMAtoMA(c(1.5, -0.52), lag.max = number), type = "p")
plot(ARMAacf(ar = c(1.5, -0.98), lag.max = number), col = "red")
lines(ARMAacf(ar = c(1.5, -0.52), lag.max = number), type = "p")
par(mfrow = c(1, 2))
number = 100
plot(ARMAtoMA(c(1.5, -0.98), lag.max = number), col = "red", ylim = c(-1.5, 2))
lines(ARMAtoMA(c(1.5, -0.52), lag.max = number), type = "p")
plot(ARMApacf(ar = c(1.5, -0.98), lag.max = number), col = "red")
model_tmp_full
str(model_tmp_full)
?arima
