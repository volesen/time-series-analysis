residuals_sd = (residuals - mean(residuals, na.rm = T))/
k1$Sigma.xx.pred[1, 1,1:length(Y)]
sum(residuals_ml^2, na.rm = T)
# 1257.6
sum((Y - k3$pred[1:length(Y), 1])^2, na.rm = T)
plot(Y)
sd <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(k_final$pred[,1] + qnorm(0.975)*
cbind(0,sd,-sd),
col= "red",lty=c(1,2,2))
plot(log(Y))
# 983.8123
sd(residuals_ml, na.rm = T)
residuals_regular = Y - k3$pred[1:length(Y), 1]
sum((residuals_regular)^2, na.rm = T)
# 995.9976
sd(residuals_regular, na.rm = T)
plot(Y[range_zoom])
sd <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd[range_zoom],-sd[range_zoom]),
col= "red",lty=c(1,2,2))
plot(Y[range_zoom])
sd_ml <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_ml[range_zoom],-sd_ml[range_zoom]),
col= "red",lty=c(1,2,2))
sd_3 <- sqrt(k3$Sigma.xx.pred[1,1,])
matlines(k3$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_3[range_zoom],-sd_3[range_zoom]),
col= "blue",lty=c(1,2,2))
## zooming in ####
plot(Y[range_zoom], ylim = c(15, 20))
plot(Y[range_zoom], ylim = c(15, 20))
sd_ml <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_ml[range_zoom],-sd_ml[range_zoom]),
col= "red",lty=c(1,2,2))
sd_3 <- sqrt(k3$Sigma.xx.pred[1,1,])
matlines(k3$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_3[range_zoom],-sd_3[range_zoom]),
col= "blue",lty=c(1,2,2))
## zooming in ####
range_zoom = seq(length(Y))
## zooming in ####
range_zoom = seq(length(Y))
plot(Y[range_zoom], ylim = c(15, 20))
sd_ml <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_ml[range_zoom],-sd_ml[range_zoom]),
col= "red",lty=c(1,2,2))
sd_3 <- sqrt(k3$Sigma.xx.pred[1,1,])
matlines(k3$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_3[range_zoom],-sd_3[range_zoom]),
col= "blue",lty=c(1,2,2))
library(numDeriv)
df <- data.frame(read.table("A4_Kulhuse.csv", sep=",",header=TRUE))
head(df)
dim(df)
df <- df %>%
mutate(DateTime = as.POSIXlt(DateTime))
# NA values
apply(is.na(df), 2, sum)
seq(length(df$Sal))[is.na(df$Sal)]
# Question 4.1: Presenting data #----------------------------------------------
plot(df$Sal, type = "p")
# there are a 4 outliers
outliers_sal = seq(length(df$Sal))[df$Sal < mean(df$Sal, na.rm = T) -
3*sd(df$Sal, na.rm = T)] %>% na.omit() %>% as.numeric()
outliers_sal
y_no_outliers = df$Sal
y_no_outliers[outliers_sal] = NA
plot(y_no_outliers)
plot(df$ODO)
source("kalman_Tymek.R")
A = matrix(1)
C = matrix(1)
Y = df$Sal
X0 = Y[1]
Sigma1 = matrix(0.01)
Sigma2 = matrix(0.005)
k_pure <- kalman(Y=Y, A=A, C=C, Sigma.1=Sigma1, Sigma.2=Sigma2,
Xhat0=X0, verbose=TRUE)
names(k_pure)
par(mfrow = c(1, 1))
plot(Y)
sd <- sqrt(k_pure$Sigma.xx.pred[1,1,])
matlines(k_pure$pred[,1] + qnorm(0.975)*cbind(0,sd,-sd),
col= "red",lty=c(1,2,2))
begining_zoom = 800
end_zoom = 950
range_zoom = seq(from = begining_zoom, to = end_zoom)
plot(Y[range_zoom])
matlines(k_pure$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd[range_zoom],-sd[range_zoom]),
col= "red",lty=c(1,2,2))
plot(y_no_outliers[range_zoom])
matlines(k_pure$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd[range_zoom],-sd[range_zoom]),
col= "red",lty=c(1,2,2))
plot(range_zoom, residuals_sd[range_zoom])
residuals = Y - k_pure$pred[1:length(Y), 1]
residuals_sd = (residuals - mean(residuals, na.rm = T))/
k_pure$Sigma.xx.pred[1, 1,1:length(Y)]
plot(residuals_sd)
plot(range_zoom, residuals_sd[range_zoom])
# Report the values that defines the
# final state of the filter (at observation 5000).
# RECONSTRUCTION
k_pure$rec[length(Y),1]
k_skipping_outliers <- kalman(Y=Y, A=A, C=C, Sigma.1=Sigma1, Sigma.2=Sigma2,
Xhat0=X0, verbose=TRUE, rule_6sd = TRUE)
## Plotting predictions ####
par(mfrow = c(1, 1))
plot(Y)
sd <- sqrt(k_skipping_outliers$Sigma.xx.pred[1,1,])
matlines(k_skipping_outliers$pred[,1] + qnorm(0.975)*cbind(0,sd,-sd),
col= "red",lty=c(1,2,2))
plot(Y[range_zoom])
matlines(k_skipping_outliers$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd[range_zoom],-sd[range_zoom]),
col= "red",lty=c(1,2,2))
## Zooming in #####
plot(range(range_zoom), Y[range_zoom])
## Zooming in #####
plot(range_zoom, Y[range_zoom])
matlines(k_skipping_outliers$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd[range_zoom],-sd[range_zoom]),
col= "red",lty=c(1,2,2))
matlines(range_zoom, k_skipping_outliers$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd[range_zoom],-sd[range_zoom]),
col= "red",lty=c(1,2,2))
sum(!k_skipping_outliers$within_range_vector, na.rm = T)
# 10 observetaions were classified as outliers
# indexes of classified observations
seq(length(Y))[!k_skipping_outliers$within_range_vector] %>%
na.omit() %>% as.numeric()
# RECONSTRUCTION
k_skipping_outliers$rec[length(Y),1]
# Question 4.5: Optimizing the variances # -------------------------------------
plot(seq(end_zoom), Y[seq(end_zoom)])
abline(v = begining_zoom)
A = matrix(1)
C = matrix(1)
Y = df$Sal
X0 = Y[1]
begining_optimizatioin = 1
end_optimization = 800
# end_optimization = length(Y)
range_optimization = seq(begining_optimizatioin, end_optimization)
Ypart = Y[range_optimization]
objective <- function(theta){
k_optimization <- kalman(Y=Ypart, A=A, C=C,
Sigma.1 = matrix(exp(theta["sigma2_system"])),
Sigma.2 = matrix(exp(theta["sigma2_observation"])),
Xhat0=X0, verbose=TRUE, rule_6sd = TRUE)
nepso <- (Ypart[-1] - k_optimization$pred[-1,1])^2 /
k_optimization$Sigma.yy.pred[1,1,-1]
# return the negative log likelihood
return(0.5 * sum(nepso + log(k_optimization$Sigma.yy.pred[1,1,-1]), na.rm = TRUE))
}
sigma2_observation_empirical = var(Ypart, na.rm = T)
theta_initial = c("sigma2_system" = log(0.01),
"sigma2_observation" = log(sigma2_observation_empirical))
opt = nlminb(theta_initial, objective)
warnings()
length(Ypart)
dim(k_pure$pred)
c(1, length(Y_part) + 1)
c(1, length(Ypart) + 1)
# sanity check
objective(theta_initial)
objective <- function(theta){
k_optimization <- kalman(Y=Ypart, A=A, C=C,
Sigma.1 = matrix(exp(theta["sigma2_system"])),
Sigma.2 = matrix(exp(theta["sigma2_observation"])),
Xhat0=X0, verbose=TRUE, rule_6sd = TRUE)
nepso <- (Ypart[-1] - k_optimization$pred[-c(1, length(Ypart) + 1),1])^2 /
k_optimization$Sigma.yy.pred[1,1,-1]
# return the negative log likelihood
return(0.5 * sum(nepso + log(k_optimization$Sigma.yy.pred[1,1,-1]), na.rm = TRUE))
}
# sanity check
objective(theta_initial)
length(Ypart[-1])
objective <- function(theta){
k_optimization <- kalman(Y=Ypart, A=A, C=C,
Sigma.1 = matrix(exp(theta["sigma2_system"])),
Sigma.2 = matrix(exp(theta["sigma2_observation"])),
Xhat0=X0, verbose=TRUE, rule_6sd = TRUE)
nepso <- (Ypart[-1] - k_optimization$pred[-c(1, length(Ypart) + 1),1])^2 /
k_optimization$Sigma.yy.pred[1,1,-c(1, length(Ypart) + 1)]
# return the negative log likelihood
return(0.5 * sum(nepso + log(k_optimization$Sigma.yy.pred[1,1,-c(1, length(Ypart) + 1)]),
na.rm = TRUE))
}
# sanity check
objective(theta_initial)
opt = nlminb(theta_initial, objective)
opt
round(exp(opt$par), 6)
Sigma1_ml = matrix(exp(opt$par)["sigma2_system"])
Sigma2_ml = matrix(exp(opt$par)["sigma2_observation"])
k_final = kalman(Y=Y, A=A, C=C,
Sigma.1 = Sigma1_ml,
Sigma.2 = Sigma2_ml,
Xhat0=X0, verbose=TRUE, rule_6sd = TRUE)
range_zoom
plot(Y[range_zoom], ylim = c(15, 20))
sd_ml <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_ml[range_zoom],-sd_ml[range_zoom]),
col= "red",lty=c(1,2,2))
sd_3 <- sqrt(k_skipping_outliers$Sigma.xx.pred[1,1,])
matlines(k_skipping_outliers$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_3[range_zoom],-sd_3[range_zoom]),
col= "blue",lty=c(1,2,2))
residuals_ml = Y - k_final$pred[1:length(Y), 1]
residuals_sd = (residuals - mean(residuals, na.rm = T))/
k1$Sigma.xx.pred[1, 1,1:length(Y)]
residuals_ml = Y - k_final$pred[1:length(Y), 1]
residuals_sd = (residuals - mean(residuals, na.rm = T))/
k_skipping_outliers$Sigma.xx.pred[1, 1,1:length(Y)]
plot(residuals_sd)
length(residuals)
plot(Y[range_zoom], ylim = c(15, 20))
sd_ml <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_ml[range_zoom],-sd_ml[range_zoom]),
col= "red",lty=c(1,2,2))
sd_3 <- sqrt(k_skipping_outliers$Sigma.xx.pred[1,1,])
matlines(k_skipping_outliers$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_3[range_zoom],-sd_3[range_zoom]),
col= "blue",lty=c(1,2,2))
legend("topright",
legend=c("Kalman ML optimized","Kalman skipping outliers"),
col=c("red","blue"), lty=c(1,1))
legend("topright",
legend=c(
"Kalman ML optimized", "95 CI",
"Kalman skipping outliers", "95 CI"),
col=c("red","red", "blue", "blue"), lty=c(1,2, 1, 2))
plot(range_zoom, Y[range_zoom], ylim = c(17, 19))
sd_ml <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(range_zoom,
k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_ml[range_zoom],-sd_ml[range_zoom]),
col= "red",lty=c(1,2,2))
sd_3 <- sqrt(k_skipping_outliers$Sigma.xx.pred[1,1,])
matlines(range_zoom,
k_skipping_outliers$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_3[range_zoom],-sd_3[range_zoom]),
col= "blue",lty=c(1,2,2))
legend("topright",
legend=c(
"Kalman ML optimized", "95 CI",
"Kalman skipping outliers", "95 CI"),
col=c("red","red", "blue", "blue"), lty=c(1,2, 1, 2))
plot(range_zoom, Y[range_zoom], ylim = c(17, 18.5))
sd_ml <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(range_zoom,
k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_ml[range_zoom],-sd_ml[range_zoom]),
col= "red",lty=c(1,2,2))
sd_3 <- sqrt(k_skipping_outliers$Sigma.xx.pred[1,1,])
matlines(range_zoom,
k_skipping_outliers$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_3[range_zoom],-sd_3[range_zoom]),
col= "blue",lty=c(1,2,2))
legend("topright",
legend=c(
"Kalman ML optimized", "95 CI",
"Kalman skipping outliers", "95 CI"),
col=c("red","red", "blue", "blue"), lty=c(1,2, 1, 2))
plot(range_zoom, Y[range_zoom], ylim = c(17, 19))
sd_ml <- sqrt(k_final$Sigma.xx.pred[1,1,])
matlines(range_zoom,
k_final$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_ml[range_zoom],-sd_ml[range_zoom]),
col= "red",lty=c(1,2,2))
sd_3 <- sqrt(k_skipping_outliers$Sigma.xx.pred[1,1,])
matlines(range_zoom,
k_skipping_outliers$pred[range_zoom,1] + qnorm(0.975)*
cbind(0,sd_3[range_zoom],-sd_3[range_zoom]),
col= "blue",lty=c(1,2,2))
legend("topright",
legend=c(
"Kalman ML optimized", "95 CI",
"Kalman skipping outliers", "95 CI"),
col=c("red","red", "blue", "blue"), lty=c(1,2, 1, 2))
# RECONSTRUCTION
k_final$rec[length(Y),1]
plot(df$Depth)
plot(df$ODOsat)
# Question 4.6: Model for dissolved oxygen # ----------------------------------
plot(df$ODOsat)
abline(h = 100, col = "red")
acf(df$ODOsat)
acf(df$ODOsat, na.action = na.omit)
?acf
acf(df$ODOsat, na.rm = T)
abline(h = 100, col = "red")
x1 <- c(5.5, 4.4, 4.6, 5.4, 7.6, 5.9, 6.1, 7.8, 6.7, 4.7)
x2 <- c(5.4, 4.9, 4.5, 4.9, 7.2, 5.5, 6.1, 7.5, 6.3, 4.2)
## The usual way
t.test(x1, x2, paired = TRUE)
t.test(x1-x2)
x1 <- c(5.5, 4.4, 4.6, 5.4, 7.6, 5.9, 6.1, 7.8, 6.7, 4.7,
NA, NA, NA, NA, NA, 4.0, 6.3, 6.0, 6.4, 3.5)
x2 <- c(5.4, 4.9, 4.5, 4.9, 7.2, 5.5, 6.1, 7.5, 6.3, 4.2,
3.4, 4.7, 3.9, 2.5, 4.1, NA, NA, NA, NA, NA)
t.test(x1, x2, paired = TRUE)
## Random effect model
id <- rep(1:20,each=2)
id
met <- rep(1:2,20)
met
x<-as.vector(t(cbind(x1,x2)))
dat <- data.frame(id=id,met=met,x=x)
dat <- na.omit(dat)
head(dat)
dim(data)
dim(dat)
dat <- data.frame(id=id,met=met,x=x)
dat
dat <- na.omit(dat)
dat
library(nlme)
?lme
# Only the first 10..
fit1.tmp <-lme(x~factor(met), random=~1|id,
data=dat[dat$id<11, ])
fit1.tmp
fit1.tmp$modelStruct
fit1.tmp$method
fit1.tmp$coefficients
summary(fit1.tmp)
##################################################
# All data
fit1.lme <- lme(x ~ factor(met), random = ~ 1| id, data = dat)
summary(fit1.lme)
## Using lme4
library(lme4)
?lmer
fit1.lmer <- lmer(x ~ factor(met) + (1|id),
data = dat)
summary(fit1.lmer)
summary(fit1.lme)
fit1.lmer$
names(fit1.lmer)
## The model estimate random effects
ranef(fit1.lme)
## And we can look at confidence intervals for the diff
intervals(fit1.lme)
## And plot the outcome
par(mfrow=c(1,1))
plot(dat$id,dat$x,col=dat$met,pch=19)
lines(c(0,22),fit1.lme$coef$fixed[1]*c(1,1),lty=2)
lines(c(0,22),sum(fit1.lme$coef$fixed)*c(1,1),lty=2,col=2)
fit1.lme$coef$fixed
for(i in 1:10){
points(i,fit1.lme$coef$fixed[1]+random.effects(fit1.lme)[[1]][i],
col=1,pch="-",cex=2)
points(i,sum(fit1.lme$coef$fixed)+random.effects(fit1.lme)[[1]][i],
col=2,pch="-",cex=2)
}
for(i in 11:15){
points(i,sum(fit1.lme$coef$fixed)+random.effects(fit1.lme)[[1]][i],
col=2,pch="-",cex=2)
}
for(i in 16:20){
points(i,fit1.lme$coef$fixed[1]+random.effects(fit1.lme)[[1]][i],
col=1,pch="-",cex=2)
}
lines(c(0,22),fit1.lme$coef$fixed[1]*c(1,1),lty=2)
lines(c(0,22),sum(fit1.lme$coef$fixed)*c(1,1),lty=2,col=2)
for(i in 1:10){
points(i,fit1.lme$coef$fixed[1]+random.effects(fit1.lme)[[1]][i],
col=1,pch="-",cex=2)
points(i,sum(fit1.lme$coef$fixed)+random.effects(fit1.lme)[[1]][i],
col=2,pch="-",cex=2)
}
for(i in 11:15){
points(i,sum(fit1.lme$coef$fixed)+random.effects(fit1.lme)[[1]][i],
col=2,pch="-",cex=2)
}
for(i in 16:20){
points(i,fit1.lme$coef$fixed[1]+random.effects(fit1.lme)[[1]][i],
col=1,pch="-",cex=2)
}
arrows(16,sum(fit1.lme$coef$fixed[1])+random.effects(fit1.lme)[[1]][16],
16,sum(fit1.lme$coef$fixed[1]),col=1,code=3)
text(16.5,sum(fit1.lme$coef$fixed[1])+random.effects(fit1.lme)[[1]][16]/2,
labels=expression(u[16]))
# Testing
anova(fit1.lme)
#################################################
# Wrong analysis (could not do it without random effect)
fit.lm<-lm(x~factor(id)+factor(met), data=dat)
summary(fit.lm)
drop1(fit.lm,test="F")
#### Define data
A <- rep(c(0,1),each=10)
B <- rep(c(0,1),times=10)
### Display A,b
cbind(A,B)
par(mfrow=c(1,2))
### Additive effekt
Y <- 2*A-3*B + rnorm(20,mean=0,sd=0.1)
plot(Y~A,col=B+1)
(dat <- aggregate(Y~A+B,FUN=mean))
### Interaction
Y <- 2*A-3*B + 2*A*B + rnorm(20,mean=0,sd=0.1)
plot(Y~A,col=B+1)
(dat <-aggregate(Y~A+B,FUN=mean))
## No interaction
A <- seq(0,1,length=100)
B <- A
### Compute Y
Y <- outer(A,B,FUN=function(x,y){2*x-3*y})
filled.contour(Y)
## Interaction
### Compute Y2
Y2 <- outer(A,B,FUN=function(x,y){2*x-3*y+2*x*y})
filled.contour(Y2)
filled.contour(Y)
filled.contour(Y2)
## elements of the block diagonal
V11 <- diag(4)*2.502115^2
V11
V <- kronecker(diag(7),V11)
V
?kronecker
######################################
# Rail
##################################################
library(nlme)
help(Rail)
Rail
dat <- Rail
names(dat)
dat$Rail<-factor(dat$Rail)
str(dat)
head(dat)
Rail
dat2 <- groupedData(travel ~ 1 | Rail ,dat)
plot(dat2)
dat2
fit1<-lme(travel ~ 1, data = dat2, random = ~ 1|Rail)
summary(fit1)
fit1.lmer <- lmer(travel ~ 1 + (1|Rail), data = dat2)
summary(fit1.lmer)
# test of fixed part
anova(fit1)
summary(fit1)
# test of fixed part
anova(fit1)
fit1
data.frame(fit1$fitted,dat2$Rail)[1:4, ]
ranef(fit1)
# test for random effect
fit2<-lm(travel ~ 1,data = dat)
anova(fit1,fit2)
## Effects
ranef(fit1)
fixef(fit1)
## Model check
plot(fit1)
## Report
intervals(fit1)
###############################
# Stool
###############################
ergoStool
help(ergoStool)
help(ergoStool)
dat <- ergoStool
names(dat)
dat$Type<-factor(dat$Type)
dat$Subject<-factor(dat$Subject)
dat2<-groupedData(effort ~ Type | Subject,data=dat)
plot(dat2)
names(dat)
## Model and summary
fit1<-lme(effort~Type, data = dat2, random = ~1|Subject)
summary(fit1)
fit1
ranef(fit1)
###########################
# Testing the model
anova(fit1)
fit2<-lm(effort~Type, data = dat)
anova(fit1,fit2)
## Confidence intervals
intervals(fit1)
## Plots
plot(fit1)
fit1$residuals
plot(fit1$residuals)
acf(fit1$residuals)
fit1$residuals
?lme
residuals(fit1)
as.numeric(residuals(fit1))
acf(as.numeric(residuals(fit1)))
## Plots
plot(fit1)
plot(as.numeric(residuals(fit1)))
par(mfrow = c(1, 1))
plot(as.numeric(residuals(fit1)))
plot(fit1,form=resid(.,type='p')~fitted(.)|Subject,abline=0)
plot(fit1,form=resid(.,type='p')~fitted(.)|Type,abline=0)
