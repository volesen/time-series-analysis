plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Salinity [PSU]'
)
margin <- 0.025
par(fig = c(0.5, 1-margin, 0.2, 0.8), new = TRUE)
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(17, 22),
axes = FALSE,
frame.plot = TRUE,
ann = FALSE
)
par(fig = c(0, 1, 0, 1))
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Salinity [PSU]'
)
margin <- 0.025
par(fig = c(0.5, 1-margin, 0.2, 0.8), new = TRUE)
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(17, 22),
axes = FALSE,
frame.plot = TRUE,
ann = FALSE
)
# Plot 2
par(fig = c(0, 1, 0, 1))
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Dissolved oxygen [mg/L]'
)
margin <- 0.025
par(fig = c(0.5, 1-margin, 0.1, 0.7), new = TRUE)
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE
)
par(fig = c(0, 1, 0, 1))
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Salinity [PSU]'
)
margin <- 0.025
par(fig = c(0.5, 1-margin, 0.2, 0.8), new = TRUE)
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(17, 22),
axes = FALSE,
frame.plot = TRUE,
ann = FALSE
)
axis(1, at = seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"), format = "%d-%m-%Y")
par(fig = c(0, 1, 0, 1))
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Dissolved oxygen [mg/L]'
)
margin <- 0.025
par(fig = c(0.5, 1-margin, 0.1, 0.7), new = TRUE)
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE
)
axis(1, at = seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"), format = "%d-%m-%Y")
par(fig = c(0.5, 1-margin, 0.05, 0.6), new = TRUE)
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE
)
margin <- 0.025
par(fig = c(0.5, 1-margin, margin, 0.7), new = TRUE)
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE
)
axis(1, at = seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"), format = "%d-%m-%Y")
# Plot 2
par(fig = c(0, 1, 0, 1))
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Dissolved oxygen [mg/L]'
)
margin <- 0.025
par(fig = c(0.5, 1-margin, margin, 0.7), new = TRUE)
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE
)
axis(1, at = seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"), format = "%d-%m-%Y")
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
# Q2
seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"
# Q2
seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day")
# Q2
seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day")
axis(1, at = seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"), format = "%d-%m-%Y")
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE
)
axis(1, at = seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"), format = "%d-%m-%Y")
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE
)
axis(1, at = seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"), format = "%d-%m-%Y")
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
# Q2
seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day")
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
#ylim = c(10.5, 11.5),
#frame.plot = TRUE,
#ann = FALSE
)
axis(1, at = seq(as.POSIXct("2017-11-30"), as.POSIXct("2017-12-06"), by = "day"))
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
#ylim = c(10.5, 11.5),
#frame.plot = TRUE,
#ann = FALSE
)
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
#xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
#ylim = c(10.5, 11.5),
#frame.plot = TRUE,
#ann = FALSE
)
View(data)
View(data)
# Plot 2
par(fig = c(0, 1, 0, 1))
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Dissolved oxygen [mg/L]'
)
margin <- 0.025
par(fig = c(0.5, 1-margin, 0.05, 0.7), new = TRUE)
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE,
axis = FALSE
)
par(fig = c(0, 1, 0, 1))
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Salinity [PSU]'
)
margin <- 0.025
par(fig = c(0.5, 1-margin, 0.2, 0.8), new = TRUE)
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(17, 22),
axes = FALSE,
frame.plot = TRUE,
ann = FALSE
)
# Q2
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE,
axis = FALSE
)
# Q2
dev.off()
plot(
data$DateTime,
data$ODO,
type = 'p',
cex  = 0.25,
xlim = as.POSIXct(c("2017-11-30", "2017-12-06")),
ylim = c(10.5, 11.5),
frame.plot = TRUE,
ann = FALSE,
axis = FALSE
)
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
# Q3
A <- matrix(c(1),nrow=1)
C <- matric(c(1), nrow=1)
C <- matrix(c(1), nrow=1)
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
# Q3
A <- matrix(c(1), nrow=1)
C <- matrix(c(1), nrow=1)
Sigma1 <- matrix(c(0.01), nrow=1) # System variance
Sigma2 <- matrix(c(0.005), nrow=1) # observation variance
source("./kalman.R")
View(kalman)
View(kalman)
View(kalman)
Sigma.1 <- matrix(c(0.01), nrow=1) # System variance
Sigma.2 <- matrix(c(0.005), nrow=1) # observation variance
k1 <- kalman(data$Sal, A=A, C=C, Sigma.1=Sigma.1, Sigma.2=Sigma.2)
plot(k1)
View(k1)
View(k1)
plot(k1$pred)
debugSource("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
# Q3
A <- matrix(c(1), nrow=1)
C <- matrix(c(1), nrow=1)
Sigma.1 <- matrix(c(0.01), nrow=1) # System variance
Sigma.2 <- matrix(c(0.005), nrow=1) # observation variance
source("./kalman.R")
k1 <- kalman(data$Sal, A=A, C=C, Sigma.1=Sigma.1, Sigma.2=Sigma.2)
plot(k1$pred)
View(k1)
View(k1)
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
k1 <-
kalman(
data$Sal,
A = A,
C = C,
Sigma.1 = Sigma.1,
Sigma.2 = Sigma.2,
verbose = TRUE
)
plot(k1$pred)
View(k1)
View(k1)
k1$Sigma.xx.pred
View(k1)
View(k1)
pred.sigma <- as.vector(k1$Sigma.yy.pred)
k1$pred
View(k1)
View(k1)
k1[["pred"]]
k1[["pred"]][-1]
tail(k1$pred, n=2)
tail(as.vector(k1$Sigma.xx.pred), n=1)
tail(as.vector(k1$Sigma.xx.pred), n=2)
plot(data$DateTime,k1$pred)
pred.sigma <- as.vector(k1$Sigma.yy.pred)
plot(data$DateTime,k1$pred[,1:5000])
k1$pred
plot(data$DateTime,k1$pred[,1:5001])
plot(data$DateTime,k1$pred[,1:4999])
plot(data$DateTime,k1$pred[1:4999])
plot(data$DateTime,k1$pred[1:5000])
lines(data$DateTime, k1$pred - 1.96*pred.sigma)
lower = k1$pred - 1.96*pred.sigma
upper = k1$pred + 1.96*pred.sigma
lines(data$DateTime, lower[1:5000])
lines(data$DateTime, upper[1:5000])
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
plot(data$DateTime,k1$pred[1:5000])
lower = k1$pred - 1.96*sqrt(pred.sigma)
upper = k1$pred + 1.96*sqrt(pred.sigma)
lines(data$DateTime, lower[1:5000])
lines(data$DateTime, upper[1:5000])
lines(data$DateTime, lower[1:5000], col="red")
lines(data$DateTime, lower[1:5000], col="red")
lines(data$DateTime, lower[1:5000], col="red", lty=2)
lines(data$DateTime, lower[1:5000], col="red", lty=2)
lines(data$DateTime, lower[1:5000], col="red", lty=2)
lines(data$DateTime, upper[1:5000], col="red", lty=2)
plot(data$DateTime,k1$pred[1:5000])
lower = k1$pred - 1.96*sqrt(pred.sigma)
upper = k1$pred + 1.96*sqrt(pred.sigma)
lines(data$DateTime, lower[1:5000], col="red", lty=2)
lines(data$DateTime, upper[1:5000], col="red", lty=2)
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
# Standardized prediction error
residuals = data$Sal -k1$pred
# Standardized prediction error
residuals = data$Sal -k1$pred[1:5000]
# Standardized prediction error
residuals = (data$Sal -k1$pred[1:5000])/pred.sigma
pred.sigma
# Standardized prediction error
residuals = (data$Sal -k1$pred[1:5000])/pred.sigma[1:5000]
# Standardized prediction error
std.residuals = (data$Sal -k1$pred[1:5000])/pred.sigma[1:5000]
plot(std.residuals)
# Standardized prediction error
std.residuals = (data$Sal -k1$pred[2:5001])/pred.sigma[2:5001]
plot(std.residuals)
1
plot(std.residuals)
plot(data$DateTime, data$Sal, cex=0.25)
plot(data$DateTime,k1$pred[1:5000], col="red")
plot(data$DateTime, data$Sal, cex=0.25)
lines(data$DateTime,k1$pred[1:5000], col="red")
lower = k1$pred - 1.96*sqrt(pred.sigma)
upper = k1$pred + 1.96*sqrt(pred.sigma)
lines(data$DateTime, lower[1:5000], col="red", lty=2)
lines(data$DateTime, upper[1:5000], col="red", lty=2)
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Salinity [PSU]'
)
lines(data$DateTime,k1$pred[1:5000], col="red")
lower = k1$pred - 1.96*sqrt(pred.sigma)
upper = k1$pred + 1.96*sqrt(pred.sigma)
lines(data$DateTime, lower[1:5000], col="red", lty=2)
lines(data$DateTime, upper[1:5000], col="red", lty=2)
# Standardized prediction error
std.residuals = (data$Sal -k1$pred[1:5000])/pred.sigma[1:5000]
plot(std.residuals)
plot(std.residuals, type="p")
plot(std.residuals, type="p", cex=0.25, x='[Time [30m]', y="Std. residuals")
# Standardized prediction error
std.residuals = (data$Sal -k1$pred[1:5000])/pred.sigma[1:5000]
plot(
std.residuals,
type = "p",
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
# Standardized prediction error
std.residuals = (data$Sal - k1$pred[1:5000])/pred.sigma[1:5000]
plot(
std.residuals,
type = "p",
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
# Standardized prediction error
std.residuals = (data$Sal - k1$pred[1:5000])
plot(
std.residuals,
type = "p",
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
std.residuals
plot(
std.residuals,
type = "p",
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
plot(
na.omit(std.residuals),
type = "p",
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
plot(
data$DateTime,
std.residuals,
type = "p",
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
plot(
data$DateTime,
std.residuals,
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
plot(
data$DateTime,
std.residuals,
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
plot(
data$DateTime,
na.omit(std.residuals),
cex = 0.25,
x = '[Time [30m]',
y = "Std. residuals"
)
na.omit(std.residuals)
source("~/DTU/02417-tsa/time-series-analysis/assignment4/volesen.R")
plot(
data$DateTime,
data$Sal,
type = 'p',
cex  = 0.25,
xlab = 'Time [30 min.]',
ylab = 'Salinity [PSU]'
)
lines(data$DateTime,k1$pred[1:5000], col="red")
lower = k1$pred - 1.96*sqrt(pred.sigma)
upper = k1$pred + 1.96*sqrt(pred.sigma)
lines(data$DateTime, lower[1:5000], col="red", lty=2)
lines(data$DateTime, upper[1:5000], col="red", lty=2)
